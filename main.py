#!/usr/bin/env python3
"""
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∑–∞–≥—Ä—É–∑—á–∏–∫ –≤–∏–¥–µ–æ –∏–∑ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π.
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –≤–∏–¥–µ–æ –∏ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
"""

import csv
import datetime
import re
import sys
import logging
from pathlib import Path
from typing import Optional, Dict, Any
from dataclasses import dataclass
from enum import Enum

try:
    import yaml
except ImportError:
    yaml = None

try:
    from yt_dlp import YoutubeDL
    from yt_dlp.utils import DownloadError, ExtractorError
except ImportError:
    print("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω yt-dlp. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install yt-dlp")
    sys.exit(1)


class OutputFormat(Enum):
    """–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –≤—ã–≤–æ–¥–∞"""
    MP4 = "mp4"
    MP3 = "mp3"
    WEBM = "webm"
    BEST_VIDEO = "best_video"
    BEST_AUDIO = "best_audio"


class VideoSource(Enum):
    """–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –≤–∏–¥–µ–æ"""
    YOUTUBE = "YouTube"
    TIKTOK = "TikTok"
    FACEBOOK = "Facebook"
    INSTAGRAM = "Instagram"
    TWITTER = "Twitter/X"
    VK = "VK"
    TWITCH = "Twitch"
    REDDIT = "Reddit"
    SOUNDCLOUD = "SoundCloud"
    BANDCAMP = "Bandcamp"
    VIMEO = "Vimeo"
    DAILYMOTION = "Dailymotion"
    SPOTIFY = "Spotify"
    OTHER = "–î—Ä—É–≥–æ–µ"


@dataclass
class AppConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    download_directory: str = "Downloads"
    max_concurrent_downloads: int = 3
    max_file_size_mb: int = 500
    write_subtitles: bool = True
    write_auto_subtitles: bool = False

    # –ö–∞—á–µ—Å—Ç–≤–æ
    max_video_height: int = 1080
    audio_quality: str = "192"
    preferred_video_codec: str = "h264"
    preferred_audio_codec: str = "aac"

    # –ü–ª–µ–π–ª–∏—Å—Ç—ã
    max_playlist_items: int = 100
    create_playlist_folders: bool = True
    download_playlists_by_default: bool = False

    # –°–µ—Ç—å
    socket_timeout: int = 30
    http_chunk_size: int = 10485760
    retries: int = 5
    prefer_ipv6: bool = False

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    log_level: str = "INFO"
    max_log_file_size: int = 10
    backup_count: int = 5
    console_output: bool = True


def load_config(config_path: str = "config.yaml") -> AppConfig:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ YAML —Ñ–∞–π–ª–∞"""
    config_file = Path(config_path)

    if not config_file.exists() or not yaml:
        if not yaml:
            print("‚ö†Ô∏è PyYAML –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
            print("üí° –î–ª—è —Ä–∞–±–æ—Ç—ã —Å config.yaml —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install pyyaml")
        return AppConfig()

    try:
        with open(config_file, 'r', encoding='utf-8') as f:
            config_data = yaml.safe_load(f)

        if not config_data:
            return AppConfig()

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        config_dict = {}

        # –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if 'download_settings' in config_data:
            ds = config_data['download_settings']
            config_dict.update({
                'download_directory': ds.get('download_directory', 'Downloads'),
                'max_concurrent_downloads': ds.get('max_concurrent_downloads', 3),
                'max_file_size_mb': ds.get('max_file_size_mb', 500),
                'write_subtitles': ds.get('write_subtitles', True),
                'write_auto_subtitles': ds.get('write_auto_subtitles', False),
            })

        # –ö–∞—á–µ—Å—Ç–≤–æ
        if 'quality_settings' in config_data:
            qs = config_data['quality_settings']
            config_dict.update({
                'max_video_height': qs.get('max_video_height', 1080),
                'audio_quality': str(qs.get('audio_quality', '192')),
                'preferred_video_codec': qs.get('preferred_video_codec', 'h264'),
                'preferred_audio_codec': qs.get('preferred_audio_codec', 'aac'),
            })

        # –ü–ª–µ–π–ª–∏—Å—Ç—ã
        if 'playlist_settings' in config_data:
            ps = config_data['playlist_settings']
            config_dict.update({
                'max_playlist_items': ps.get('max_playlist_items', 100),
                'create_playlist_folders': ps.get('create_playlist_folders', True),
                'download_playlists_by_default': ps.get('download_playlists_by_default', False),
            })

        # –°–µ—Ç—å
        if 'network_settings' in config_data:
            ns = config_data['network_settings']
            config_dict.update({
                'socket_timeout': ns.get('socket_timeout', 30),
                'http_chunk_size': ns.get('http_chunk_size', 10485760),
                'retries': ns.get('retries', 5),
                'prefer_ipv6': ns.get('prefer_ipv6', False),
            })

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        if 'logging_settings' in config_data:
            ls = config_data['logging_settings']
            config_dict.update({
                'log_level': ls.get('level', 'INFO'),
                'max_log_file_size': ls.get('max_log_file_size', 10),
                'backup_count': ls.get('backup_count', 5),
                'console_output': ls.get('console_output', True),
            })

        return AppConfig(**{k: v for k, v in config_dict.items()})

    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è config.yaml: {e}")
        print("üîÑ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        return AppConfig()


@dataclass
class DownloadConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏"""
    url: str
    output_format: OutputFormat = OutputFormat.MP4
    downloaded_by: str = "User"
    playlist_name: str = ""
    proxy_used: bool = False
    notes: str = ""
    quality: str = "best"
    download_playlist: bool = False
    max_downloads: int = 50  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤


class VideoDownloader:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ"""

    def __init__(self, download_dir: Optional[str] = None, config: Optional[AppConfig] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑—á–∏–∫–∞

        Args:
            download_dir: –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ –∑–∞–≥—Ä—É–∑–æ–∫ (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç config)
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        """
        self.config = config or load_config()
        self.download_dir = Path(download_dir) if download_dir else Path.cwd() / self.config.download_directory
        self.log_file = Path.cwd() / 'downloads_log.csv'
        self.logger = self._setup_logging(self.config)
        self._setup_directories()

    @staticmethod
    def _setup_logging(config: Optional[AppConfig] = None) -> logging.Logger:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if not config:
            config = AppConfig()

        logger = logging.getLogger('VideoDownloader')
        logger.setLevel(getattr(logging, config.log_level.upper(), logging.INFO))

        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ handlers
        logger.handlers = []

        # –°–æ–∑–¥–∞–µ–º handler –¥–ª—è —Ñ–∞–π–ª–∞
        log_dir = Path.cwd() / 'logs'
        log_dir.mkdir(exist_ok=True)

        from logging.handlers import RotatingFileHandler
        file_handler = RotatingFileHandler(
            log_dir / f'downloader_{datetime.datetime.now().strftime("%Y%m%d")}.log',
            maxBytes=config.max_log_file_size * 1024 * 1024,  # MB to bytes
            backupCount=config.backup_count,
            encoding='utf-8'
        )

        # –§–æ—Ä–º–∞—Ç—Ç–µ—Ä
        formatter = logging.Formatter(
            '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        )

        file_handler.setFormatter(formatter)
        logger.addHandler(file_handler)

        # –°–æ–∑–¥–∞–µ–º handler –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if config.console_output:
            console_handler = logging.StreamHandler()
            console_handler.setFormatter(formatter)
            logger.addHandler(console_handler)

        return logger

    def _setup_directories(self) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞–ø–æ–∫ –∏ —Ñ–∞–π–ª–æ–≤"""
        try:
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫
            self.download_dir.mkdir(exist_ok=True)
            self.logger.info(f"üìÅ –ü–∞–ø–∫–∞ –∑–∞–≥—Ä—É–∑–æ–∫: {self.download_dir}")

            # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –∂—É—Ä–Ω–∞–ª–∞ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if not self.log_file.exists():
                with open(self.log_file, mode='w', newline='', encoding='utf-8') as f:
                    writer = csv.writer(f)
                    writer.writerow([
                        'ID', '–§–æ—Ä–º–∞—Ç', '–í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏', '–ò—Å—Ç–æ—á–Ω–∏–∫', 'URL',
                        '–ù–∞–∑–≤–∞–Ω–∏–µ', '–¢–µ–≥–∏', '–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É', '–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (MB)',
                        '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', '–ü–ª–µ–π–ª–∏—Å—Ç', '–ü–æ–∑–∏—Ü–∏—è –≤ –ø–ª–µ–π–ª–∏—Å—Ç–µ',
                        '–ó–∞–≥—Ä—É–∑–∏–ª', '–ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ', '–ü—Ä–æ–∫—Å–∏', '–ö–∞—á–µ—Å—Ç–≤–æ',
                        '–ó–∞–º–µ—Ç–∫–∏', '–°—Ç–∞—Ç—É—Å'
                    ])
                self.logger.info(f"üìã –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª –∂—É—Ä–Ω–∞–ª–∞: {self.log_file}")
            else:
                self.logger.info(f"üìã –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∂—É—Ä–Ω–∞–ª: {self.log_file}")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π: {e}")
            raise

    @staticmethod
    def get_video_source(url: str) -> VideoSource:
        """
        –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –≤–∏–¥–µ–æ –ø–æ URL

        Args:
            url: URL –≤–∏–¥–µ–æ

        Returns:
            VideoSource: –ò—Å—Ç–æ—á–Ω–∏–∫ –≤–∏–¥–µ–æ
        """
        url_lower = url.lower()

        source_mapping = {
            ('youtube.com', 'youtu.be', 'youtube-nocookie.com'): VideoSource.YOUTUBE,
            ('tiktok.com',): VideoSource.TIKTOK,
            ('facebook.com', 'fb.watch', 'fb.com'): VideoSource.FACEBOOK,
            ('instagram.com', 'instagr.am'): VideoSource.INSTAGRAM,
            ('twitter.com', 'x.com', 't.co'): VideoSource.TWITTER,
            ('vk.com', 'vk.ru'): VideoSource.VK,
            ('twitch.tv',): VideoSource.TWITCH,
            ('reddit.com', 'redd.it'): VideoSource.REDDIT,
            ('soundcloud.com',): VideoSource.SOUNDCLOUD,
            ('bandcamp.com',): VideoSource.BANDCAMP,
            ('vimeo.com',): VideoSource.VIMEO,
            ('dailymotion.com',): VideoSource.DAILYMOTION,
            ('spotify.com', 'open.spotify.com'): VideoSource.SPOTIFY,
        }

        for domains, source in source_mapping.items():
            if any(domain in url_lower for domain in domains):
                return source

        return VideoSource.OTHER

    @staticmethod
    def sanitize_filename(filename: str, max_length: int = 180) -> str:
        """
        –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤

        Args:
            filename: –ò—Å—Ö–æ–¥–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
            max_length: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞

        Returns:
            str: –û—á–∏—â–µ–Ω–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        """
        if not filename or filename.strip() == "":
            return "Unknown_Video"

        # –£–±–∏—Ä–∞–µ–º HTML —Ç–µ–≥–∏
        filename = re.sub(r'<[^>]+>', '', filename)

        # –£–±–∏—Ä–∞–µ–º –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤
        filename = re.sub(r'[<>:"/\\|?*]', '', filename)

        # –ó–∞–º–µ–Ω—è–µ–º —ç–º–æ–¥–∑–∏ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        filename = re.sub(r'[^\w\s\-_.()\[\]{}]', '', filename)

        # –ó–∞–º–µ–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –æ–¥–Ω–∏–º
        filename = re.sub(r'\s+', ' ', filename)

        # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
        filename = filename.strip()

        # –£–±–∏—Ä–∞–µ–º —Ç–æ—á–∫–∏ –≤ –∫–æ–Ω—Ü–µ (–Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ –≤ Windows)
        filename = filename.rstrip('.')

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
        if len(filename) > max_length:
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            words = filename.split()
            result = words[0] if words else "Video"

            for word in words[1:]:
                if len(result + " " + word) <= max_length:
                    result += " " + word
                else:
                    break
            filename = result

        return filename or "Unknown_Video"

    @staticmethod
    def _get_file_size_mb(file_path: Path) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ –≤ –º–µ–≥–∞–±–∞–π—Ç–∞—Ö"""
        try:
            return round(file_path.stat().st_size / (1024 * 1024), 2)
        except (OSError, AttributeError):
            return 0.0

    @staticmethod
    def _format_duration(duration: Optional[float]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–∏–¥–µ–æ"""
        if not duration:
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

        minutes, seconds = divmod(int(duration), 60)
        hours, minutes = divmod(minutes, 60)

        if hours > 0:
            return f"{hours:02d}:{minutes:02d}:{seconds:02d}"
        else:
            return f"{minutes:02d}:{seconds:02d}"

    def _get_unique_filename(self, base_title: str, ext: str, playlist_info: Optional[Dict[str, Any]] = None) -> str:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥—É–±–ª–∏–∫–∞—Ç–æ–≤

        Args:
            base_title: –ë–∞–∑–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
            ext: –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            playlist_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–µ–π–ª–∏—Å—Ç–µ

        Returns:
            str: –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        """
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
        timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")

        # –§–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
        if playlist_info:
            # –î–ª—è –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä
            playlist_index = playlist_info.get('playlist_index', 1)
            base_name = f"{playlist_index:02d} - {base_title}"
        else:
            base_name = base_title

        # –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
        clean_name = self.sanitize_filename(base_name)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
        target_dir = self.download_dir
        if playlist_info and playlist_info.get('playlist_title'):
            playlist_dir = self.download_dir / self.sanitize_filename(playlist_info['playlist_title'])
            if playlist_dir.exists():
                target_dir = playlist_dir

        original_name = f"{clean_name}.{ext}"
        final_path = target_dir / original_name

        # –ï—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å—É—Ñ—Ñ–∏–∫—Å
        counter = 1
        while final_path.exists():
            name_with_counter = f"{clean_name}_{timestamp}_{counter:02d}.{ext}"
            final_path = target_dir / name_with_counter
            counter += 1

    def log_download(self, info_dict: Dict[str, Any], config: DownloadConfig,
                     file_path: Path, status: str = "–£—Å–ø–µ—à–Ω–æ") -> bool:
        """
        –ó–∞–ø–∏—Å—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∫–∞—á–∞–Ω–Ω–æ–º –≤–∏–¥–µ–æ –≤ –∂—É—Ä–Ω–∞–ª

        Args:
            info_dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∏–¥–µ–æ –æ—Ç yt-dlp
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
            file_path: –ü—É—Ç—å –∫ —Å–∫–∞—á–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
            status: –°—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏

        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏ –≤ –∂—É—Ä–Ω–∞–ª
        """
        try:
            timestamp = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∑–∞–ø–∏—Å–∏
            record_id = f"{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}_{hash(config.url) % 10000:04d}"

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —Å–ª–æ–≤–∞—Ä—è
            title = info_dict.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ')
            tags = ', '.join(info_dict.get('tags', [])[:10]) if info_dict.get('tags') else '–ù–µ—Ç —Ç–µ–≥–æ–≤'
            duration = VideoDownloader._format_duration(info_dict.get('duration'))
            playlist_title = info_dict.get('playlist_title', config.playlist_name)
            playlist_index = info_dict.get('playlist_index', '')

            # –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            file_size = VideoDownloader._get_file_size_mb(file_path) if file_path.exists() else 0.0

            with open(self.log_file, mode='a', newline='', encoding='utf-8') as f:
                writer = csv.writer(f)
                writer.writerow([
                    record_id,
                    config.output_format.value,
                    timestamp,
                    self.get_video_source(config.url).value,
                    config.url,
                    title,
                    tags,
                    str(file_path),
                    file_size,
                    duration,
                    playlist_title,
                    playlist_index,
                    config.downloaded_by,
                    '',  # –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ (–∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤—Ä—É—á–Ω—É—é)
                    '–î–∞' if config.proxy_used else '–ù–µ—Ç',
                    config.quality,
                    config.notes,
                    status
                ])

            self.logger.info(f"üìù –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∂—É—Ä–Ω–∞–ª: {title}")
            return True

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –∂—É—Ä–Ω–∞–ª: {e}")
            return False

    def _get_ydl_opts(self, config: DownloadConfig) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è yt-dlp

        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏

        Returns:
            Dict[str, Any]: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è yt-dlp
        """
        # –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å—é
        ydl_opts = {
            'outtmpl': str(self.download_dir / '%(title)s.%(ext)s'),
            'quiet': False,
            'no_warnings': False,
            'ignoreerrors': True,  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –≤ –ø–ª–µ–π–ª–∏—Å—Ç–∞—Ö
            'retries': self.config.retries,
            'fragment_retries': self.config.retries,
            'extractor_retries': 3,
            'file_access_retries': 3,
            'http_chunk_size': self.config.http_chunk_size,

            # –£–ª—É—á—à–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ SABR –∏ –¥—Ä—É–≥–∏—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
            'user_agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'referer': 'https://www.youtube.com/',

            # –£–ª—É—á—à–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –≤—Å–µ—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
            'extractor_args': {
                'youtube': {
                    'player_client': ['android', 'web', 'tv'],
                    'player_skip': ['webpage', 'configs'],
                    'skip': ['dash', 'hls'],
                },
                'instagram': {
                    'api_version': 'v1',
                    'include_stories': False,
                },
                'facebook': {
                    'tab': 'videos',
                    'bypass_age_gate': True,
                    'use_cookies': True,  # –í–∞–∂–Ω–æ –¥–ª—è Facebook
                },
                'tiktok': {
                    'webpage_download': False,
                    'api_hostname': 'api.tiktokv.com',
                },
                'soundcloud': {
                    'client_id': None,  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ
                }
            },

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
            'http_headers': {
                'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
                'Accept-Language': 'en-us,en;q=0.5',
                'Accept-Encoding': 'gzip, deflate',
                'Accept-Charset': 'ISO-8859-1,utf-8;q=0.7,*;q=0.7',
                'Keep-Alive': '300',
                'Connection': 'keep-alive',
            },

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            'socket_timeout': self.config.socket_timeout,
            'source_address': None,  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π IP
        }

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏ —Ñ–∞–π–ª–æ–≤
        if config.download_playlist:
            ydl_opts.update({
                'noplaylist': False,
                'playlistend': config.max_downloads,
                'outtmpl': str(self.download_dir / '%(playlist_title)s' / '%(playlist_index)02d - %(title)s.%(ext)s'),
            })
        else:
            ydl_opts.update({
                'noplaylist': True,
                'outtmpl': str(self.download_dir / '%(uploader)s - %(title)s - %(id)s.%(ext)s'),
            })

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        max_height = self.config.max_video_height
        format_mapping = {
            OutputFormat.MP4: f'best[height<={max_height}][ext=mp4]/best[height<=720][ext=mp4]/best[ext=mp4]/best',
            OutputFormat.WEBM: f'best[ext=webm]/best[height<={max_height}]/best',
            OutputFormat.BEST_VIDEO: f'best[height<={max_height}]/best[height<=720]/best',
            OutputFormat.BEST_AUDIO: 'bestaudio[ext=m4a]/bestaudio[ext=mp3]/bestaudio/best',
            OutputFormat.MP3: 'bestaudio[ext=m4a]/bestaudio/best'
        }

        ydl_opts['format'] = format_mapping.get(config.output_format, 'best[height<=1080]')

        # –ü–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∞—É–¥–∏–æ —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∫–∞—á–µ—Å—Ç–≤–∞
        if config.output_format == OutputFormat.MP3:
            ydl_opts['postprocessors'] = [{
                'key': 'FFmpegExtractAudio',
                'preferredcodec': 'mp3',
                'preferredquality': self.config.audio_quality,
            }]
        elif config.output_format == OutputFormat.BEST_AUDIO:
            ydl_opts['postprocessors'] = [{
                'key': 'FFmpegExtractAudio',
                'preferredcodec': 'best',
            }]

        return ydl_opts

    def _fix_facebook_url(self, url: str) -> str:
        """
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Facebook URL –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏

        Args:
            url: –ò—Å—Ö–æ–¥–Ω—ã–π URL Facebook

        Returns:
            str: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π URL –≤ —Ñ–æ—Ä–º–∞—Ç–µ facebook.com/watch/?v=ID
        """
        if 'facebook.com' not in url.lower() and 'fb.watch' not in url.lower():
            return url

        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è ID –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ Facebook URL
        patterns = [
            r'/reel/(\d{15,16})',  # facebook.com/reel/1234567890123456
            r'/watch/\?v=(\d{15,16})',  # facebook.com/watch/?v=1234567890123456 (—É–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π)
            r'/videos/(\d{15,16})',  # facebook.com/user/videos/1234567890123456
            r'fb\.watch/[^/]+.*?(\d{15,16})',  # fb.watch/AbC123/ -> –Ω–∞—Ö–æ–¥–∏—Ç ID –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö
            r'video_id[=:](\d{15,16})',  # –ü—Ä—è–º–æ–µ —É–∫–∞–∑–∞–Ω–∏–µ video_id
            r'\b(\d{15,16})\b',  # –õ—é–±–æ–µ 15-16-–∑–Ω–∞—á–Ω–æ–µ —á–∏—Å–ª–æ –≤ URL
        ]

        for pattern in patterns:
            match = re.search(pattern, url)
            if match:
                video_id = match.group(1)
                fixed_url = f"https://www.facebook.com/watch/?v={video_id}"

                if fixed_url != url:
                    self.logger.info(f"üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω Facebook URL:")
                    self.logger.info(f"   –ò—Å—Ö–æ–¥–Ω—ã–π: {url}")
                    self.logger.info(f"   –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π: {fixed_url}")

                return fixed_url

        self.logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å Facebook URL: {url}")
        self.logger.info("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–π—Ç–∏ ID –≤—Ä—É—á–Ω—É—é –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç: facebook.com/watch/?v=ID")

        return url

    def download_video(self, config: DownloadConfig) -> bool:
        """
        –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ

        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏

        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏
        """
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Facebook URL
        if 'facebook.com' in config.url.lower() or 'fb.watch' in config.url.lower():
            config.url = self._fix_facebook_url(config.url)

        self.logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å {self.get_video_source(config.url).value}")
        self.logger.info(f"üîó URL: {config.url}")
        self.logger.info(f"üìπ –§–æ—Ä–º–∞—Ç: {config.output_format.value}")

        if config.download_playlist:
            self.logger.info(f"üìã –†–µ–∂–∏–º –ø–ª–µ–π–ª–∏—Å—Ç–∞ (–º–∞–∫—Å. {config.max_downloads} –≤–∏–¥–µ–æ)")

        ydl_opts = self._get_ydl_opts(config)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python
        import sys
        if sys.version_info < (3, 10):
            self.logger.warning("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É—Å—Ç–∞—Ä–µ–≤—à–∞—è –≤–µ—Ä—Å–∏—è Python. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–∏—Ç—å –¥–æ Python 3.10+")

        try:
            with YoutubeDL(ydl_opts) as ydl:
                self.logger.info("üìä –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ...")

                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –±–µ–∑ –∑–∞–≥—Ä—É–∑–∫–∏
                try:
                    info_dict = ydl.extract_info(config.url, download=False)
                except (DownloadError, ExtractorError, ImportError, ValueError) as e:
                    error_msg = str(e).lower()

                    if ("cannot parse data" in error_msg or
                            "sabr streaming" in error_msg or
                            "formats have been skipped" in error_msg):

                        self.logger.warning("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π. –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...")

                        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
                        ydl_opts_fallback = ydl_opts.copy()

                        # –î–ª—è Facebook - —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
                        if "facebook" in config.url.lower():
                            ydl_opts_fallback.update({
                                'format': 'best[height<=720]/worst',
                                'extractor_args': {
                                    'facebook': {
                                        'tab': 'videos',
                                        'bypass_age_gate': True,
                                        'use_cookies': True,
                                    }
                                },
                                'http_headers': {
                                    'User-Agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 14_6 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1.1 Mobile/15E148 Safari/604.1',
                                    'Accept-Language': 'en-US,en;q=0.9',
                                    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
                                    'DNT': '1',
                                    'Referer': 'https://www.facebook.com/',
                                }
                            })

                        # –î–ª—è SoundCloud - —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                        elif "soundcloud" in config.url.lower():
                            ydl_opts_fallback.update({
                                'format': 'best',
                                'extractor_args': {
                                    'soundcloud': {
                                        'client_id': None,
                                        'use_oauth': False,
                                    }
                                }
                            })

                        # –î–ª—è YouTube SABR
                        elif "youtube" in config.url.lower() or "youtu.be" in config.url.lower():
                            ydl_opts_fallback.update({
                                'format': 'best[height<=720]/best[height<=480]/worst',
                                'extractor_args': {
                                    'youtube': {
                                        'player_client': ['android_creator', 'android'],
                                        'player_skip': ['webpage', 'configs', 'js'],
                                        'skip': ['dash', 'hls'],
                                    }
                                }
                            })

                        # –û–±—â–∏–µ fallback –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                        else:
                            ydl_opts_fallback.update({
                                'format': 'best[height<=720]/worst',
                                'ignoreerrors': True,
                            })

                        with YoutubeDL(ydl_opts_fallback) as ydl_fallback:
                            info_dict = ydl_fallback.extract_info(config.url, download=False)
                            ydl_opts = ydl_opts_fallback  # –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
                    else:
                        raise

                if not info_dict:
                    self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ")
                    return False

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–µ–π–ª–∏—Å—Ç–∞
                if 'entries' in info_dict:
                    return self._download_playlist(info_dict, config, ydl_opts)
                else:
                    return self._download_single_video(info_dict, config, ydl_opts)

        except KeyboardInterrupt:
            self.logger.info("‚èπÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            return False
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {e}")
            return False

    def _download_single_video(self, info_dict: Dict[str, Any],
                               config: DownloadConfig, ydl_opts: Dict[str, Any]) -> bool:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ"""
        try:
            original_title = info_dict.get('title', 'Unknown_Video')
            uploader = info_dict.get('uploader', info_dict.get('channel', 'Unknown_Channel'))
            video_id = info_dict.get('id', 'unknown_id')

            # –°–æ–∑–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            if uploader and uploader.lower() not in original_title.lower():
                enhanced_title = f"{uploader} - {original_title} - {video_id}"
            else:
                enhanced_title = f"{original_title} - {video_id}"

            clean_title = self.sanitize_filename(enhanced_title)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            ext = 'mp3' if config.output_format == OutputFormat.MP3 else info_dict.get('ext', 'mp4')

            self.logger.info(f"üìÑ –ù–∞–∑–≤–∞–Ω–∏–µ: {original_title}")
            self.logger.info(f"üë§ –ê–≤—Ç–æ—Ä: {uploader}")
            self.logger.info(f"üÜî ID: {video_id}")
            self.logger.info(f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {VideoDownloader._format_duration(info_dict.get('duration'))}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º–∏
            source = self.get_video_source(config.url)

            # Instagram
            if source == VideoSource.INSTAGRAM:
                error_indicators = ['login_required', 'private_account', 'user_not_found']
                info_str = str(info_dict).lower()

                if any(indicator in info_str for indicator in error_indicators) or not info_dict.get('formats'):
                    self.logger.error("‚ùå Instagram —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–ª–∏ –≤–∏–¥–µ–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
                    self.log_download(info_dict, config, Path(""), "–û—à–∏–±–∫–∞: —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Instagram")
                    return False

            # Facebook - –æ—Å–æ–±–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
            elif source == VideoSource.FACEBOOK:
                if not info_dict.get('formats') or not info_dict.get('title'):
                    self.logger.warning("‚ö†Ô∏è Facebook –≤–∏–¥–µ–æ –º–æ–∂–µ—Ç —Ç—Ä–µ–±–æ–≤–∞—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
                    self.logger.info("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –≤–æ–π–¥–∏—Ç–µ –≤ Facebook –≤ –±—Ä–∞—É–∑–µ—Ä–µ –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π")
                    # –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º False - –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å

            # TikTok
            elif source == VideoSource.TIKTOK:
                if 'private' in str(info_dict).lower() or not info_dict.get('formats'):
                    self.logger.error("‚ùå TikTok –≤–∏–¥–µ–æ –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
                    self.log_download(info_dict, config, Path(""), "–û—à–∏–±–∫–∞: TikTok –≤–∏–¥–µ–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
                    return False

            # SoundCloud - –æ–±—ã—á–Ω–æ —Å—Ç–∞–±–∏–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç
            elif source == VideoSource.SOUNDCLOUD:
                if 'private' in str(info_dict).lower() and not info_dict.get('formats'):
                    self.logger.error("‚ùå SoundCloud —Ç—Ä–µ–∫ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π")
                    self.log_download(info_dict, config, Path(""), "–û—à–∏–±–∫–∞: SoundCloud —Ç—Ä–µ–∫ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π")
                    return False

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ
            with YoutubeDL(ydl_opts) as ydl:
                self.logger.info("‚¨áÔ∏è –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ...")
                ydl.download([config.url])

            # –ù–∞—Ö–æ–¥–∏–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            file_path = self._find_downloaded_file(clean_title, ext, video_id=video_id, uploader=uploader)

            if file_path:
                self.logger.info(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω: {file_path.name}")
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∂—É—Ä–Ω–∞–ª
                self.log_download(info_dict, config, file_path)
                return True
            else:
                self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª")
                self.log_download(info_dict, config, Path(""), "–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ: {e}")
            self.log_download(info_dict, config, Path(""), f"–û—à–∏–±–∫–∞: {str(e)}")
            return False

    def _download_playlist(self, info_dict: Dict[str, Any],
                           config: DownloadConfig, ydl_opts: Dict[str, Any]) -> bool:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–ª–µ–π–ª–∏—Å—Ç–∞"""
        playlist_title = info_dict.get('title', 'Unknown_Playlist')
        entries = info_dict.get('entries', [])

        if not entries:
            self.logger.warning("‚ùå –ü–ª–µ–π–ª–∏—Å—Ç –ø—É—Å—Ç –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return False

        self.logger.info(f"üìã –ü–ª–µ–π–ª–∏—Å—Ç: {playlist_title}")
        self.logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ: {len(entries)}")

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –ø–ª–µ–π–ª–∏—Å—Ç–∞
        config.playlist_name = playlist_title

        success_count = 0
        total_count = min(len(entries), config.max_downloads)

        with YoutubeDL(ydl_opts) as ydl:
            for i, entry in enumerate(entries[:config.max_downloads], 1):
                if entry is None:
                    continue

                try:
                    self.logger.info(f"‚¨áÔ∏è –ó–∞–≥—Ä—É–∂–∞–µ–º [{i}/{total_count}]: {entry.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")

                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ
                    ydl.download([entry['webpage_url']])

                    # –ù–∞—Ö–æ–¥–∏–º —Ñ–∞–π–ª –∏ –ª–æ–≥–∏—Ä—É–µ–º
                    clean_title = self.sanitize_filename(entry.get('title', 'Unknown'))
                    ext = 'mp3' if config.output_format == OutputFormat.MP3 else entry.get('ext', 'mp4')

                    file_path = self._find_downloaded_file(clean_title, ext, in_playlist=True,
                                                           playlist_title=playlist_title)

                    if file_path:
                        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∑–∏—Ü–∏–∏ –≤ –ø–ª–µ–π–ª–∏—Å—Ç–µ
                        entry['playlist_index'] = i
                        entry['playlist_title'] = playlist_title

                        self.log_download(entry, config, file_path)
                        success_count += 1
                        self.logger.info(f"‚úÖ [{i}/{total_count}] –ó–∞–≥—Ä—É–∂–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
                    else:
                        self.logger.warning(f"‚ö†Ô∏è [{i}/{total_count}] –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏")

                except Exception as e:
                    self.logger.error(f"‚ùå [{i}/{total_count}] –û—à–∏–±–∫–∞: {e}")
                    continue

        self.logger.info(f"üéâ –ó–∞–≥—Ä—É–∑–∫–∞ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {success_count}/{total_count} —É—Å–ø–µ—à–Ω–æ")
        return success_count > 0

    def _find_downloaded_file(self, clean_title: str, ext: str,
                              in_playlist: bool = False, playlist_title: str = "",
                              video_id: str = "", uploader: str = "") -> Optional[Path]:
        """–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        search_patterns = [
            clean_title,
            video_id,
            uploader if uploader else "",
        ]

        # –ü–æ–∏—Å–∫ –≤ –ø–∞–ø–∫–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞
        if in_playlist and playlist_title:
            playlist_dir = self.download_dir / self.sanitize_filename(playlist_title)
            if playlist_dir.exists():
                for pattern in search_patterns:
                    if pattern:
                        for file_path in playlist_dir.iterdir():
                            if (file_path.is_file() and
                                    pattern.lower() in file_path.name.lower() and
                                    file_path.suffix.lower() == f'.{ext.lower()}'):
                                return file_path

        # –ü–æ–∏—Å–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞–ø–∫–µ
        for pattern in search_patterns:
            if pattern:
                for file_path in self.download_dir.iterdir():
                    if (file_path.is_file() and
                            pattern.lower() in file_path.name.lower() and
                            file_path.suffix.lower() == f'.{ext.lower()}'):
                        return file_path

        # –ü–æ–∏—Å–∫ —Å–∞–º–æ–≥–æ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ —Å –Ω—É–∂–Ω—ã–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º
        recent_files = []
        for file_path in self.download_dir.rglob(f"*.{ext}"):
            if file_path.is_file():
                stat = file_path.stat()
                recent_files.append((stat.st_mtime, file_path))

        if recent_files:
            recent_files.sort(reverse=True)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –º–∏–Ω—É—Ç—ã
            import time
            if time.time() - recent_files[0][0] < 120:  # 2 –º–∏–Ω—É—Ç—ã
                return recent_files[0][1]

        return None


def check_and_update_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    import subprocess
    import sys

    try:
        print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é yt-dlp...")
        result = subprocess.run([sys.executable, '-m', 'pip', 'show', 'yt-dlp'],
                                capture_output=True, text=True)

        if result.returncode == 0:
            for line in result.stdout.split('\n'):
                if line.startswith('Version:'):
                    current_version = line.split(':', 1)[1].strip()
                    print(f"üì¶ –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è yt-dlp: {current_version}")
                    break

        # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        update_choice = input("üîÑ –û–±–Ω–æ–≤–∏—Ç—å yt-dlp –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏? (y/N): ").strip().lower()

        if update_choice in ['y', 'yes', '–¥–∞']:
            print("‚¨áÔ∏è –û–±–Ω–æ–≤–ª—è–µ–º yt-dlp...")
            result = subprocess.run([sys.executable, '-m', 'pip', 'install', '--upgrade', 'yt-dlp'],
                                    capture_output=True, text=True)

            if result.returncode == 0:
                print("‚úÖ yt-dlp —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
                print("\nüéµ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –º—É–∑—ã–∫–∏:")
                print("‚Ä¢ YouTube & YouTube Music - –ª—É—á—à–∏–π –≤—ã–±–æ—Ä –¥–ª—è –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤")
                print("‚Ä¢ SoundCloud - –ø–æ–¥–∫–∞—Å—Ç—ã –∏ –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–µ –∞—Ä—Ç–∏—Å—Ç—ã")
                print("‚Ä¢ Bandcamp - –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ, –ø–æ–∫—É–ø–∫–∏ –∞—Ä—Ç–∏—Å—Ç–æ–≤")
                print("‚Ä¢ Vimeo - –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ")
                print("‚Ä¢ VK - —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω–∞—è –º—É–∑—ã–∫–∞")
                print("‚Ä¢ Spotify - —Ç—Ä–µ–∫–∏ (—Ç—Ä–µ–±—É–µ—Ç—Å—è Premium)")
                print("\nüìπ –í–∏–¥–µ–æ: TikTok, Instagram, Facebook, Twitter/X, Twitch, Reddit")

                print("\nüí° –°–æ–≤–µ—Ç: –¥–ª—è –º—É–∑—ã–∫–∏ –≤—ã–±–∏—Ä–∞–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç MP3 (192kbps)")
                print("üí° –î–ª—è –±–µ–≥–∞: –ª—É—á—à–µ –∑–∞—Ä–∞–Ω–µ–µ —Å–æ–∑–¥–∞—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç –Ω–∞ YouTube")
                print("\n" + "=" * 70)
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {result.stderr}")
                print("\n" + "=" * 70)

        else:
            print("\n" + "=" * 70)

    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å yt-dlp: {e}")
        print("\n" + "=" * 70)


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    print("üé¨ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∑–∞–≥—Ä—É–∑—á–∏–∫ –≤–∏–¥–µ–æ –∏–∑ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π v2.1")
    print("=" * 70)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python
    if sys.version_info < (3, 10):
        print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Python {}.{}.{}".format(*sys.version_info[:3]))
        print("üìã –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–∏—Ç—å –¥–æ Python 3.10+ –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏")
        print("üîó –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: https://www.python.org/downloads/")

        continue_choice = input("\n‚ùì –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–µ–π? (y/N): ").strip().lower()
        if continue_choice not in ['y', 'yes', '–¥–∞']:
            print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ PyYAML
    try:
        import yaml
        config_available = True
    except ImportError:
        config_available = False
        print("‚ö†Ô∏è PyYAML –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - config.yaml –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å")
        install_yaml = input("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å PyYAML –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π? (Y/n): ").strip().lower()

        if install_yaml not in ['n', 'no', '–Ω–µ—Ç']:
            try:
                import subprocess
                print("‚¨áÔ∏è –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º PyYAML...")
                result = subprocess.run([sys.executable, '-m', 'pip', 'install', 'pyyaml'],
                                        capture_output=True, text=True)
                if result.returncode == 0:
                    print("‚úÖ PyYAML —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
                    import yaml
                    config_available = True
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {result.stderr}")
            except Exception as e:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å PyYAML: {e}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    check_choice = input("\nüîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è yt-dlp? (Y/n): ").strip().lower()
    if check_choice not in ['n', 'no', '–Ω–µ—Ç']:
        check_and_update_dependencies()

    print("\n" + "=" * 70)

    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑—á–∏–∫ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
        if config_available:
            config = load_config()
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {config.download_directory}")
            downloader = VideoDownloader(config=config)
        else:
            print("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            downloader = VideoDownloader()

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        url = input("üîó –í–≤–µ–¥–∏—Ç–µ URL –≤–∏–¥–µ–æ –∏–ª–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞: ").strip()

        if not url:
            print("‚ùå URL –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã
        source = VideoDownloader.get_video_source(url)
        print(f"\nüîç –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫: {source.value}")

        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è Facebook
        if source == VideoSource.FACEBOOK:
            print("\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: Facebook —Ç—Ä–µ–±—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ URL!")
            print("üìã –î–ª—è —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:")
            print("   https://www.facebook.com/watch/?v=–í–ò–î–ï–û_ID")
            print("üí° –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø–æ–ø—ã—Ç–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å URL")
            print("üìñ –ü–æ–¥—Ä–æ–±–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ —Ñ–∞–π–ª–µ FACEBOOK_GUIDE.md")

            continue_fb = input("\n‚ùì –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É –∑–∞–≥—Ä—É–∑–∫–∏? (Y/n): ").strip().lower()
            if continue_fb in ['n', 'no', '–Ω–µ—Ç']:
                print("üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–π—Ç–∏ —Ç–æ—Ç –∂–µ –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ YouTube –∏–ª–∏ SoundCloud")
                return

        # –í—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞
        print("\nüìπ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç:")
        print("1. MP4 (–≤–∏–¥–µ–æ, –¥–æ 1080p)")
        print("2. MP3 (—Ç–æ–ª—å–∫–æ –∞—É–¥–∏–æ, 192kbps)")
        print("3. WEBM (–≤–∏–¥–µ–æ)")
        print("4. –õ—É—á—à–µ–µ –≤–∏–¥–µ–æ")
        print("5. –õ—É—á—à–µ–µ –∞—É–¥–∏–æ")

        format_choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-5): ").strip()

        format_mapping = {
            '1': OutputFormat.MP4,
            '2': OutputFormat.MP3,
            '3': OutputFormat.WEBM,
            '4': OutputFormat.BEST_VIDEO,
            '5': OutputFormat.BEST_AUDIO
        }

        output_format = format_mapping.get(format_choice, OutputFormat.MP4)

        # –û–ø—Ü–∏—è –ø–ª–µ–π–ª–∏—Å—Ç–∞
        download_playlist = False
        if 'playlist' in url.lower() or 'list=' in url:
            playlist_choice = input("\nüìã –û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–ª–µ–π–ª–∏—Å—Ç. –°–∫–∞—á–∞—Ç—å –≤–µ—Å—å –ø–ª–µ–π–ª–∏—Å—Ç? (y/N): ").strip().lower()
            download_playlist = playlist_choice in ['y', 'yes', '–¥–∞']

            if download_playlist:
                try:
                    max_downloads = int(input("üìä –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 50): ").strip() or "50")
                except ValueError:
                    max_downloads = 50
            else:
                max_downloads = 1
        else:
            max_downloads = 1

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        notes = input("üìù –ó–∞–º–µ—Ç–∫–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ): ").strip()

        print("\n" + "=" * 70)

        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = DownloadConfig(
            url=url,
            output_format=output_format,
            download_playlist=download_playlist,
            max_downloads=max_downloads,
            notes=notes
        )

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        success = downloader.download_video(config)

        if success:
            print("\nüéâ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            print(f"üìÅ –§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {downloader.download_dir}")
            print(f"üìã –ñ—É—Ä–Ω–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω: {downloader.log_file}")
        else:
            print("\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ")

    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()